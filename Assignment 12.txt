!!!!! HTML Code below this line !!!!!!


<input type="button" value="Create" onclick="createTree()" />
Tree Creation / Traversal - Stack calculator <br/>
        
X
<input type='text' id='x' value='' />

Y
<input type='text' id='y' value='' />
   
<p id="output"></p>


!!!!! Javascript Code below this line !!!!!!

function Node(_content) {
  this.next = null;
  this.last = null;
  this.content = _content;

}
var Stack = function() {
  this.head = null;
  this.top = null;
  this.length = 0;

  this.push = function(_content) {
    //debugger;
    if (_content >= 1 && _content <= 1000) {
      //No head - create one

      if (this.head == null) {
        //first creating an instance of a node and adding our users content
        this.head = new Node(_content);
        //setting the pointer for the next value to link to the list
        this.top = this.head;
        this.length = 1;
        return this;
      }
      //top of the stack now
      var addedNode = new Node(_content);
      //previous node's pointer - now the current node has it's own pointer to link it to the bottom
      addedNode.last = this.top;
      //providing a pointer to itself
      this.top.next = addedNode;
      //setting itself as the top of the stack
      this.top = addedNode;
      this.length = 2;
      return this;

      //logic for numerators will match the symbols and pass the previous values
      //length is our property that is a check for multiple nodes before calculations
    } else if (_content == "+" && this.length > 1) {
      //previous two stacks must be pulled and then the operator must be used between the two values  
      var add = ((parseInt(this.head.content) + parseInt(this.head.next.content)));
      //removing the first pointer from the top of the stack -> it points at itself
      //removing the 2nd pointer that points at the next value
      this.top = this.top.last;
      this.top.next = null;
      //repeating the for the head of the stack
      this.top = this.head.next;
      this.top = null;

      //creating a new node for the top of the stack with the results inside
      this.head = new Node(add);
      //setting the head of the stack to be the results of the two stacks together
      this.top = this.head;
      //this is set to two, resetting as our stack is only 1 after the combination of all 3 stacks
      this.length = 1;
      return this;

    } else if (_content == "-" && this.length > 1) {

      var sub = ((parseInt(this.head.content) - parseInt(this.head.next.content)));
      this.top = this.top.last;
      this.top.next = null;
      this.top = this.head.next;
      this.top = null;
      this.head = new Node(sub);
      this.top = this.head;
      this.length = 1;
      return this;

    } else if (_content == "*" && this.length > 1) {

      var multiply = ((parseInt(this.head.content) * parseInt(this.head.next.content)));
      this.top = this.top.last;
      this.top.next = null;
      this.top = this.head.next;
      this.top = null;
      this.head = new Node(multiply);
      this.top = this.head;
      this.length = 1;
      return this;

    } else if (_content == "/" && this.length > 1) {

      var divide = ((parseInt(this.head.content) / parseInt(this.head.next.content)));


      this.top = this.top.last;
      this.top.next = null;

      this.top = this.head.next;
      this.top = null;


      this.head = new Node(divide);
      this.top = this.head;
      this.length = 1;
      return this;

    }



    //non number format from user
    var bad_input = "Please input two numbers from 1-1000 and a math operator to operate stack calculator" + "</br>";
    return document.getElementById("outputBadUser").innerHTML = (bad_input);
  }
  this.pop = function() {
    if (this.head == null) {
      alert("The Stack is Empty");
      return null;
    }
    //bottom of the stack doesn't point the other values
    //without this logic the pop method will error out when trying to overwrite the top.last pointer
    if (this.top.last == null) {
      this.head = null;
      return this;
    }


    //Top of the stack for storage for a return function
    var a = this.top;
    //this is removing the pointer that is inside of the top pointing at the node below it
    //setting it to itself rather than point at the lower node in the stack
    this.top = this.top.last;
    //this is the next pointer that is used by stack to find the value of the node being removed
    //with this gone the node can be over written is empty
    this.top.next = null;

    return a;
  }
  this.toString = function() {
    var str = "";
    var node = this.head;
    //displays the top of the stack
    var i = 1;
    while (node != null) {
      str += "  " + node.content + "  ";
      node = node.next;
      ++i;
    }
    return str;
  }
}
var TNode = function(_content) {
  this.parent = null;
  this.left = null;
  this.right = null;
  this.content = _content;
}
TNode.prototype.addNode = function(_content) {

  var _node = new TNode(_content);
  // if no left - add to left
  if (this.left == null) {
    _node.parent = this;
    this.left = _node;
    return this;
  }

  if (this.right == null) {
    _node.parent = this;
    this.right = _node;
    return this;
  }
  var leftN = this.left.numberOfChildren();
  var rightN = this.right.numberOfChildren();

  if (leftN < rightN) {
    this.left.addNode(_content);
  } else {
    this.right.addNode(_content);
  }

  return this;
}
TNode.prototype.numberOfChildren = function() {
  var n = 0;
  if (this.left != null) {
    n = 1 + this.left.numberOfChildren();
  }
  if (this.right != null) {
    n = n + 1 + this.right.numberOfChildren();
  }
  return n;
}
TNode.prototype.print = function() {
  var s = this.printNode();
  if (this.left != null) {
    s += this.left.print();
  }
  if (this.right != null) {
    s += this.right.print();
  }
  return s;
}
TNode.prototype.printNode = function() {
  var s = "Node: " + this.content;
  if (this.left != null) {
    s += " Left: " + this.left.content;
  }

  if (this.right != null) {
    s = s + " Right: " + this.right.content;
  }
  s += "<br />";

  return s;
}
TNode.prototype.traverse = function() {
  //recursively seeks out the left property to be set to null before adding content
  //this is LVR
  if (this.left != null) this.left.traverse();
  s += this.content + " ";
  if (this.right != null) this.right.traverse();

}
var BinaryTree = function() {
  this.top = null;

  this.addNode = function(_content) {
    // If no top node - add to top 
    if (this.top == null) {
      var _node = new TNode(_content);
      this.top = _node;
      return this;
    }
    // otherwise let node select
    this.top.addNode(_content);
    return this;
  }
}
BinaryTree.prototype.print = function() {
  if (this.top != null) return this.top.print();
}
BinaryTree.prototype.traverse = function() {
  //passes the entire tree to the traverse function inside of the tnode class
  //this is to use the properties of the tnode class to recursively step through the tree
  if (this.top != null) return this.top.traverse();
}
var s = "";
var stack = new Stack();

function createTree() {

  var tree = new BinaryTree();
  /*
  I mapped out the tree by hand to get an idea of what the algorithm was doing to create the tree
  					Tree Values    Tree Tnode creation order
  								1				    1
                 / \			   / \	
                5   3			  2   3		
               / \ / \	   / \ / \		
              1  * +  *   5  7 4  6 		
   The first figure is the  actual placement that would all my alogrithm to correctly pull the values for the stack.
   The 2nd figure is the order of the Tnode creation.
   After that I just push the values to the stack and output the results to the screen for the user
  */
  var c = document.getElementById("x").value;
  var d = document.getElementById("y").value;
  tree.addNode(c);
  tree.addNode(5);
  tree.addNode(3);
  tree.addNode('+');
  tree.addNode(d);
  tree.addNode('*');
  tree.addNode('*');
  tree.traverse();
  document.getElementById("output").innerHTML += "Binary Tree Map: " +"</br>" + tree.print();
  document.getElementById("output").innerHTML += "Tree travesal using LVR: " + s + "</br>";
  var stackInformation = s.split(' ');
  for (var i = 0; i < stackInformation.length - 1; i++) {
    document.getElementById("output").innerHTML += "Sending " + stackInformation[i] + " to the stack" + "</br>";
    stack.push(stackInformation[i]);
    document.getElementById("output").innerHTML += "Contents of the stack: " + stack.toString() + "</br>";
  }





}
